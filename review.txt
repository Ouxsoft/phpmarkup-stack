# Review 30 June

## Architecture
The Processor class is depdendent on concrete classes, which is a violation of the depedency inversion principal.
I'm not actually convinced that fixing it is worthwhile though.
You'll need a lot of boilerplate code and if you expect the constructors of those two classes to be stable then
it might be over-engineering to rigourously adhere to this principal,
or at the very least it would be cargo-cult programming.

`\LivingMarkup\Engine::__construct` accepts a concrete Configuration class as a parameter.  This should be an
 interface to adhere to the dependency inversion principal.  You should also consider
passing in the other dependencies rather than constructing them yourself in the class constructor.


## Testing
* Great work on the unit test coverage
* You'll get more confident with mocks and stubs as you practice more

## Docblocks

* Consider adding docblock type hinting for class variables to help IDE.  For example in Processor.php you
 could have:

    /**
     * @var Kernel
     */
    private $kernel;

* I think that the docblock and signature for `\LivingMarkup\Element\AbstractElement::__construct` should look
 like this:

    /**
     * Element constructor
     *
     * @param ArgumentArray|null $args
     */
    final public function __construct(?ArgumentArray $args = null)
    {

* Class Element is undefined in the docblock for `\LivingMarkup\Element\ElementPool::getById`

* I think the docblock and signature for `\LivingMarkup\Configuration::isset` should look like this:

    /**
     * @param string ...$keys
     * @return bool
     */
    public function isset(string ...$keys): bool
    {

* I don't think the comment at `src/LivingMarkup/Configuration.php:158` is helpful... you've named the method
 well so the comment is redundant.
If you want to comment then I'd suggest commenting what the "method" is and what the system uses it for (that's
 not immediately clear to me as a newcomer to the project)
But be careful of writing too much commentary - it always depends who you ask but personally I try to be sparse
 in comments and rely on clear source code.
I'd remove this comment.  The one at `src/LivingMarkup/Configuration.php:182` is slightly better because it
mentions that you're checking for existance, but that's pretty clear from your code.
This reminds me of a quote by C.A.R Hoare - There are two ways of constructing a software design: One way is to
 make it so simple that there are obviously no deficiencies, and the other way is to make it so complicated that there are no obvious deficiencies. The first method is far more difficult. It demands the same skill, devotion, insight, and even inspiration as the discovery of the simple physical laws which underlie the complex phenomena of nature.
